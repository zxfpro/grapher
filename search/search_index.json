{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AIWgraph","text":""},{"location":"adapter/","title":"filetool","text":"<p>This path the project documentation focuses on the realize of  </p> <p>\u9002\u914d\u5668\u914d\u7f6e</p>"},{"location":"adapter/#grapher.adapter.CanvasAdapter","title":"<code>CanvasAdapter</code>","text":"<p>               Bases: <code>DataAdapter</code></p> <p>Canvas\u9002\u914d\u5668</p> Source code in <code>grapher/adapter.py</code> <pre><code>class CanvasAdapter(DataAdapter):\n    \"\"\"\n    Canvas\u9002\u914d\u5668\n    \"\"\"\n    def pull(self) -&gt; CanvasData:\n        # \u4eceCanvas\u62c9\u53d6\u6570\u636e\n        print(\"\u4eceCanvas\u62c9\u53d6\u6570\u636e\")\n        return CanvasData(canvas_data=\"\u56fe\u8868\u6570\u636e\")\n\n    def push(self, data: CanvasData) -&gt; None:\n        # \u5c06\u6570\u636e\u63a8\u9001\u5230Canvas\n        print(f\"\u5c06\u6570\u636e\u63a8\u9001\u5230Canvas: {data.dict()}\")\n\n    def to_networkx(self, data: CanvasData) -&gt; NetworkXData:\n        # \u5c06Canvas\u6570\u636e\u8f6c\u6362\u4e3aNetworkX\u683c\u5f0f\n        print(\"\u5c06Canvas\u6570\u636e\u8f6c\u6362\u4e3aNetworkX\u683c\u5f0f\")\n        return NetworkXData(networkx_data=\"\u8f6c\u6362\u540e\u7684\u6570\u636e\")\n\n    def from_networkx(self, networkx_data: NetworkXData) -&gt; CanvasData:\n        # \u5c06NetworkX\u6570\u636e\u8f6c\u6362\u4e3aCanvas\u683c\u5f0f\n        print(\"\u5c06NetworkX\u6570\u636e\u8f6c\u6362\u4e3aCanvas\u683c\u5f0f\")\n        return CanvasData(canvas_data=\"\u8f6c\u6362\u540e\u7684\u6570\u636e\")\n</code></pre>"},{"location":"adapter/#grapher.adapter.DataAdapter","title":"<code>DataAdapter</code>","text":"<p>\u6570\u636e\u9002\u914d\u5668\u63a5\u53e3</p> Source code in <code>grapher/adapter.py</code> <pre><code>class DataAdapter:\n    \"\"\"\n    \u6570\u636e\u9002\u914d\u5668\u63a5\u53e3\n    \"\"\"\n    def pull(self) -&gt; BaseModel:\n        pass\n\n    def push(self, data: BaseModel) -&gt; None:\n        pass\n\n    def to_networkx(self, data: BaseModel) -&gt; NetworkXData:\n        pass\n\n    def from_networkx(self, networkx_data: NetworkXData) -&gt; BaseModel:\n        pass\n</code></pre>"}]}