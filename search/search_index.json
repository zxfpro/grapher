{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AIWgraph","text":"<p>\u5e95\u5c42</p> <p>canvas \u7684SDK</p>"},{"location":"#_1","title":"\u589e\u5220\u6539\u67e5","text":"<p>canvas\u4e1a\u52a1</p>"},{"location":"#1","title":"\u529f\u80fd1","text":"<p>1 \u904d\u5386\u6240\u6709\u7ed3\u70b9(\u548c\u7ebf), \u627e\u5230\u6240\u6709\u9ec4\u8272\u7684\u4e8b\u60c5, \u83b7\u53d6id 2 \u904d\u5386\u6240\u6709\u7ed3\u70b9 \u77e5\u9053\u5bf9\u5e94id \u83b7\u53d6\u5bf9\u5e94\u4efb\u52a1,  3 \u5c06\u4efb\u52a1\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u770b\u677f\u6216\u8005\u4efb\u52a1\u4e2d</p>"},{"location":"#_2","title":"\u589e\u5220\u6539\u67e5","text":""},{"location":"#_3","title":"\u589e","text":"<p>\u4eba\u529b\u589e\u52a0</p>"},{"location":"#_4","title":"\u5220","text":"<p>\u4eba\u529b\u5220\u9664</p>"},{"location":"#_5","title":"\u6539","text":"<p>\u4fee\u6539\u989c\u8272(\u4ee3\u8868\u72b6\u6001) \u4fee\u6539</p>"},{"location":"#_6","title":"\u67e5","text":"<p>\u67e5\u627e\u5bf9\u5e94\u989c\u8272\u7684\u6587\u5b57(text)</p>"},{"location":"adapter/","title":"filetool","text":"<p>This path the project documentation focuses on the realize of  </p> <p>\u9002\u914d\u5668\u914d\u7f6e</p>"},{"location":"adapter/#grapher.adapter.CanvasAdapter","title":"<code>CanvasAdapter</code>","text":"<p>               Bases: <code>DataAdapter</code></p> <p>Canvas\u9002\u914d\u5668</p> Source code in <code>grapher/adapter.py</code> <pre><code>class CanvasAdapter(DataAdapter):\n    \"\"\"\n    Canvas\u9002\u914d\u5668\n    \"\"\"\n    def pull(self) -&gt; CanvasData:\n        # \u4eceCanvas\u62c9\u53d6\u6570\u636e\n        print(\"\u4eceCanvas\u62c9\u53d6\u6570\u636e\")\n        return CanvasData(canvas_data=\"\u56fe\u8868\u6570\u636e\")\n\n    def push(self, data: CanvasData) -&gt; None:\n        # \u5c06\u6570\u636e\u63a8\u9001\u5230Canvas\n        print(f\"\u5c06\u6570\u636e\u63a8\u9001\u5230Canvas: {data.dict()}\")\n\n    def to_networkx(self, data: CanvasData) -&gt; NetworkXData:\n        # \u5c06Canvas\u6570\u636e\u8f6c\u6362\u4e3aNetworkX\u683c\u5f0f\n        print(\"\u5c06Canvas\u6570\u636e\u8f6c\u6362\u4e3aNetworkX\u683c\u5f0f\")\n        return NetworkXData(networkx_data=\"\u8f6c\u6362\u540e\u7684\u6570\u636e\")\n\n    def from_networkx(self, networkx_data: NetworkXData) -&gt; CanvasData:\n        # \u5c06NetworkX\u6570\u636e\u8f6c\u6362\u4e3aCanvas\u683c\u5f0f\n        print(\"\u5c06NetworkX\u6570\u636e\u8f6c\u6362\u4e3aCanvas\u683c\u5f0f\")\n        return CanvasData(canvas_data=\"\u8f6c\u6362\u540e\u7684\u6570\u636e\")\n</code></pre>"},{"location":"adapter/#grapher.adapter.DataAdapter","title":"<code>DataAdapter</code>","text":"<p>\u6570\u636e\u9002\u914d\u5668\u63a5\u53e3</p> Source code in <code>grapher/adapter.py</code> <pre><code>class DataAdapter:\n    \"\"\"\n    \u6570\u636e\u9002\u914d\u5668\u63a5\u53e3\n    \"\"\"\n    def pull(self) -&gt; BaseModel:\n        pass\n\n    def push(self, data: BaseModel) -&gt; None:\n        pass\n\n    def to_networkx(self, data: BaseModel) -&gt; NetworkXData:\n        pass\n\n    def from_networkx(self, networkx_data: NetworkXData) -&gt; BaseModel:\n        pass\n</code></pre>"},{"location":"adapter/#grapher.adapter.FilesAdapter","title":"<code>FilesAdapter</code>","text":"<p>               Bases: <code>DataAdapter</code></p> <p>Files \u9002\u914d\u5668</p> Source code in <code>grapher/adapter.py</code> <pre><code>class FilesAdapter(DataAdapter):\n    \"\"\"\n    Files \u9002\u914d\u5668\n    \"\"\"\n    def pull(self) -&gt; FileData:\n        # \u4eceFiles\u62c9\u53d6\u6570\u636e\n        print(\"\u4eceFiles\u62c9\u53d6\u6570\u636e\")\n        return FileData(file_data=\"\u6587\u4ef6\u6570\u636e\")\n\n    def push(self, data: FileData) -&gt; None:\n        # \u5c06\u6570\u636e\u63a8\u9001\u5230Files\n        print(f\"\u5c06\u6570\u636e\u63a8\u9001\u5230Files: {data.dict()}\")\n\n    def to_networkx(self, data: FileData) -&gt; NetworkXData:\n        # \u5c06Files\u6570\u636e\u8f6c\u6362\u4e3aNetworkX\u683c\u5f0f\n        print(\"\u5c06Files\u6570\u636e\u8f6c\u6362\u4e3aNetworkX\u683c\u5f0f\")\n        return NetworkXData(networkx_data=\"\u8f6c\u6362\u540e\u7684\u6570\u636e\")\n\n    def from_networkx(self, networkx_data: NetworkXData) -&gt; FileData:\n        # \u5c06NetworkX\u6570\u636e\u8f6c\u6362\u4e3aFiles\u683c\u5f0f\n        print(\"\u5c06NetworkX\u6570\u636e\u8f6c\u6362\u4e3aFiles\u683c\u5f0f\")\n        return FileData(file_data=\"\u8f6c\u6362\u540e\u7684\u6570\u636e\")\n</code></pre>"},{"location":"canvas/","title":"canvas","text":"<p>API Helper</p>"},{"location":"canvas/#grapher.canvas.core.Canvas","title":"<code>Canvas</code>","text":"Source code in <code>grapher/canvas/core.py</code> <pre><code>class Canvas():\n    def __init__(self,file_path:str=None):\n        \"\"\"\n        \u521d\u59cb\u5316\n\n        file_path : str \u4f20\u5165\u683c\u5f0f\u4e3acanvas\u7684\u6587\u4ef6\u8def\u5f84\n        \"\"\"\n        self.file_path = file_path\n        with open(file_path,'r') as f:\n            text = f.read()\n        bdict = Box(json.loads(text))\n        self.bdict = bdict\n\n        for edge in bdict.edges:\n            if not edge.get('color'):\n                edge.setdefault('color','0')\n        for node in bdict.nodes:\n            if not node.get('color'):\n                node.setdefault('color','0')\n\n        self.edges = bdict.edges\n        self.nodes = bdict.nodes\n\n    def add(self):\n        pass\n\n    def delete(self):\n        pass\n\n\n    def select_by_id(self,type:str ='edge',key:str='')-&gt;Box:\n        \"\"\"\n        \u901a\u8fc7id \u6765\u9009\u62e9 Box\n        type: str edge, node\n        key: str id \n        \"\"\"\n        def check_id(obj,id=''):\n            if obj.id == id:\n                return obj\n        id = key\n        if type == 'edge':\n            for edge in self.edges:\n                if check_id(edge,id=id):\n                    return edge\n        else:\n            for node in self.nodes:\n                if check_id(node,id=id):\n                    return node\n\n    def select_by_color(self, key: Color = '', type='edge'):\n        \"\"\"\n        Select objects based on color.\n\n        key: Color\n            The color to filter the objects by.\n\n        type: str\n            The type of objects to filter ('edge', 'node', 'all').\n            If 'edge', filter from edges.\n            If 'node', filter from nodes.\n            If 'all', filter from both nodes and edges.\n            Defaults to 'edge'.\n        \"\"\"\n        def check_key(obj, key=''):\n            # Check if the object's color matches the key color\n            if obj.color == key.value:\n                return obj\n\n        color = key\n        if type == 'edge':              \n            # If type is 'edge', select from edges\n            objs = self.edges\n        elif type == 'node':\n            # If type is 'node', select from nodes\n            objs = self.nodes\n        elif type == 'all':\n            # If type is 'all', select from both nodes and edges\n            objs = self.nodes + self.edges\n        else:\n            # Default to select from both nodes and edges if type is unknown\n            objs = self.nodes + self.edges\n\n        # Return a list of objects whose color matches the key\n        return [i for i in objs if check_key(i, key=color)]\n    def select_nodes_by_type(self,key:str='')-&gt;list:\n        \"\"\"\n        Select nodes based on their type.\n\n        key: str\n            The type of nodes to select. Defaults to 'text'.\n\n        Returns a list of nodes with matching type.\n        \"\"\"\n        def check_key(obj,key='text'):\n            if obj.type == key:\n                return obj\n        objs = self.nodes\n        return [i for i in objs if check_key(i,key=key)]\n\n    def select_nodes_by_text(self,key:str='')-&gt;list:\n        \"\"\"\n        Select nodes containing specific text.\n\n        key: str\n            The text to search for in nodes.\n\n        Returns a list of nodes whose text contains the specified key.\n        \"\"\"\n        def check_key(obj,key:str=''):\n            obj_text = obj.get('text') or ''\n            if key in obj_text:\n                return obj\n        objs = self.nodes\n        return [i for i in objs if check_key(i,key=key)]\n    def select_edges_by_text(self,key:str='')-&gt;list:\n        \"\"\"\n        Select edges containing specific text.\n\n        key: str\n            The text to search for in edges.\n\n        Returns a list of edges whose labels contain the specified key.\n        \"\"\"\n        def check_key(obj,key:str=''):\n            obj_text = obj.get('label') or ''\n            if key in obj_text:\n                return obj\n        objs = self.edges\n        return [i for i in objs if check_key(i,key=key)]\n\n    def select_by_styleAttributes(self,type = 'file',key:Color=''):\n        \"\"\"\n        Placeholder for selecting objects by style attributes.\n\n        type: str\n            The object type to select ('file', etc.).\n\n        key: Color\n            The color key for selection.\n\n        This method is currently not implemented.\n        \"\"\"\n        pass\n\n    def to_file(self,file_path):\n        \"\"\"\n        Write the canvas data to a specified file path in JSON format.\n\n        file_path: str\n            The path to the file where data will be written.\n        \"\"\"\n        with open(file_path,'w') as f:\n            f.write(self.bdict.to_json())\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.__init__","title":"<code>__init__(file_path=None)</code>","text":"<p>\u521d\u59cb\u5316</p> <p>file_path : str \u4f20\u5165\u683c\u5f0f\u4e3acanvas\u7684\u6587\u4ef6\u8def\u5f84</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def __init__(self,file_path:str=None):\n    \"\"\"\n    \u521d\u59cb\u5316\n\n    file_path : str \u4f20\u5165\u683c\u5f0f\u4e3acanvas\u7684\u6587\u4ef6\u8def\u5f84\n    \"\"\"\n    self.file_path = file_path\n    with open(file_path,'r') as f:\n        text = f.read()\n    bdict = Box(json.loads(text))\n    self.bdict = bdict\n\n    for edge in bdict.edges:\n        if not edge.get('color'):\n            edge.setdefault('color','0')\n    for node in bdict.nodes:\n        if not node.get('color'):\n            node.setdefault('color','0')\n\n    self.edges = bdict.edges\n    self.nodes = bdict.nodes\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.select_by_color","title":"<code>select_by_color(key='', type='edge')</code>","text":"<p>Select objects based on color.</p> Color <p>The color to filter the objects by.</p> str <p>The type of objects to filter ('edge', 'node', 'all'). If 'edge', filter from edges. If 'node', filter from nodes. If 'all', filter from both nodes and edges. Defaults to 'edge'.</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def select_by_color(self, key: Color = '', type='edge'):\n    \"\"\"\n    Select objects based on color.\n\n    key: Color\n        The color to filter the objects by.\n\n    type: str\n        The type of objects to filter ('edge', 'node', 'all').\n        If 'edge', filter from edges.\n        If 'node', filter from nodes.\n        If 'all', filter from both nodes and edges.\n        Defaults to 'edge'.\n    \"\"\"\n    def check_key(obj, key=''):\n        # Check if the object's color matches the key color\n        if obj.color == key.value:\n            return obj\n\n    color = key\n    if type == 'edge':              \n        # If type is 'edge', select from edges\n        objs = self.edges\n    elif type == 'node':\n        # If type is 'node', select from nodes\n        objs = self.nodes\n    elif type == 'all':\n        # If type is 'all', select from both nodes and edges\n        objs = self.nodes + self.edges\n    else:\n        # Default to select from both nodes and edges if type is unknown\n        objs = self.nodes + self.edges\n\n    # Return a list of objects whose color matches the key\n    return [i for i in objs if check_key(i, key=color)]\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.select_by_id","title":"<code>select_by_id(type='edge', key='')</code>","text":"<p>\u901a\u8fc7id \u6765\u9009\u62e9 Box type: str edge, node key: str id</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def select_by_id(self,type:str ='edge',key:str='')-&gt;Box:\n    \"\"\"\n    \u901a\u8fc7id \u6765\u9009\u62e9 Box\n    type: str edge, node\n    key: str id \n    \"\"\"\n    def check_id(obj,id=''):\n        if obj.id == id:\n            return obj\n    id = key\n    if type == 'edge':\n        for edge in self.edges:\n            if check_id(edge,id=id):\n                return edge\n    else:\n        for node in self.nodes:\n            if check_id(node,id=id):\n                return node\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.select_by_styleAttributes","title":"<code>select_by_styleAttributes(type='file', key='')</code>","text":"<p>Placeholder for selecting objects by style attributes.</p> str <p>The object type to select ('file', etc.).</p> Color <p>The color key for selection.</p> <p>This method is currently not implemented.</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def select_by_styleAttributes(self,type = 'file',key:Color=''):\n    \"\"\"\n    Placeholder for selecting objects by style attributes.\n\n    type: str\n        The object type to select ('file', etc.).\n\n    key: Color\n        The color key for selection.\n\n    This method is currently not implemented.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.select_edges_by_text","title":"<code>select_edges_by_text(key='')</code>","text":"<p>Select edges containing specific text.</p> str <p>The text to search for in edges.</p> <p>Returns a list of edges whose labels contain the specified key.</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def select_edges_by_text(self,key:str='')-&gt;list:\n    \"\"\"\n    Select edges containing specific text.\n\n    key: str\n        The text to search for in edges.\n\n    Returns a list of edges whose labels contain the specified key.\n    \"\"\"\n    def check_key(obj,key:str=''):\n        obj_text = obj.get('label') or ''\n        if key in obj_text:\n            return obj\n    objs = self.edges\n    return [i for i in objs if check_key(i,key=key)]\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.select_nodes_by_text","title":"<code>select_nodes_by_text(key='')</code>","text":"<p>Select nodes containing specific text.</p> str <p>The text to search for in nodes.</p> <p>Returns a list of nodes whose text contains the specified key.</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def select_nodes_by_text(self,key:str='')-&gt;list:\n    \"\"\"\n    Select nodes containing specific text.\n\n    key: str\n        The text to search for in nodes.\n\n    Returns a list of nodes whose text contains the specified key.\n    \"\"\"\n    def check_key(obj,key:str=''):\n        obj_text = obj.get('text') or ''\n        if key in obj_text:\n            return obj\n    objs = self.nodes\n    return [i for i in objs if check_key(i,key=key)]\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.select_nodes_by_type","title":"<code>select_nodes_by_type(key='')</code>","text":"<p>Select nodes based on their type.</p> str <p>The type of nodes to select. Defaults to 'text'.</p> <p>Returns a list of nodes with matching type.</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def select_nodes_by_type(self,key:str='')-&gt;list:\n    \"\"\"\n    Select nodes based on their type.\n\n    key: str\n        The type of nodes to select. Defaults to 'text'.\n\n    Returns a list of nodes with matching type.\n    \"\"\"\n    def check_key(obj,key='text'):\n        if obj.type == key:\n            return obj\n    objs = self.nodes\n    return [i for i in objs if check_key(i,key=key)]\n</code></pre>"},{"location":"canvas/#grapher.canvas.core.Canvas.to_file","title":"<code>to_file(file_path)</code>","text":"<p>Write the canvas data to a specified file path in JSON format.</p> str <p>The path to the file where data will be written.</p> Source code in <code>grapher/canvas/core.py</code> <pre><code>def to_file(self,file_path):\n    \"\"\"\n    Write the canvas data to a specified file path in JSON format.\n\n    file_path: str\n        The path to the file where data will be written.\n    \"\"\"\n    with open(file_path,'w') as f:\n        f.write(self.bdict.to_json())\n</code></pre>"}]}